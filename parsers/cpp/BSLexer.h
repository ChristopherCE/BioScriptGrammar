
// Generated from /bioscriptgrammar/grammar/BSLexer.g4 by ANTLR 4.7

#pragma once


#include "antlr4-runtime.h"




class  BSLexer : public antlr4::Lexer {
public:
  enum {
    IF = 1, ELSE = 2, REPEAT = 3, WHILE = 4, FUNCTION = 5, RETURN = 6, MANIFEST = 7,
    MODULE = 8, STATIONARY = 9, FUNCTIONS = 10, INSTRUCTIONS = 11, DETECT = 12,
    MIX = 13, SPLIT = 14, HEAT = 15, DRAIN = 16, DISPENSE = 17, DISPOSE = 18,
    GRADIENT = 19, STORE = 20, RANGE = 21, AT = 22, WITH = 23, FOR = 24,
    INTO = 25, TIMES = 26, ON = 27, OF = 28, UNITS = 29, NAT = 30, REAL = 31,
    MAT = 32, BOOL = 33, IDENTIFIER = 34, STRING_LITERAL = 35, BOOL_LITERAL = 36,
    FLOAT_LITERAL = 37, INTEGER_LITERAL = 38, TIME_NUMBER = 39, VOLUME_NUMBER = 40,
    TEMP_NUMBER = 41, LPAREN = 42, RPAREN = 43, LBRACE = 44, RBRACE = 45,
    LBRACKET = 46, RBRACKET = 47, SEMICOLON = 48, COMMA = 49, DOT = 50,
    ASSIGN = 51, GT = 52, LT = 53, BANG = 54, TILDE = 55, QUESTION = 56,
    COLON = 57, EQUALITY = 58, LTE = 59, GTE = 60, NOTEQUAL = 61, AND = 62,
    OR = 63, INC = 64, DEC = 65, ADDITION = 66, SUBTRACT = 67, MULTIPLY = 68,
    DIVIDE = 69, BITAND = 70, BITOR = 71, CARET = 72, MOD = 73, UNDERSCORE = 74,
    NANOSECOND = 75, MICROSECOND = 76, MILLISECOND = 77, CENTISECOND = 78,
    DECISECOND = 79, SECOND = 80, MINUTE = 81, HOUR = 82, DAY = 83, WEEK = 84,
    MONTH = 85, YEAR = 86, NANOLITRE = 87, MICROLITRE = 88, MILLILITRE = 89,
    CENTILITRE = 90, DECILITRE = 91, LITRE = 92, DECALITRE = 93, CELSIUS = 94,
    FAHRENHEIT = 95, KELVIN = 96, ACIDS_STRONG_NON_OXIDIZING = 97, ACIDS_STRONG_OXIDIZING = 98,
    ACIDS_CARBOXYLIC = 99, ALCOHOLS_AND_POLYOLS = 100, ALDEHYDES = 101,
    AMIDES_AND_IMIDES = 102, AMINES_PHOSPHINES_AND_PYRIDINES = 103, AZO_DIAZO_AZIDO_HYDRAZINE_AND_AZIDE_COMPOUNDS = 104,
    CARBAMATES = 105, BASES_STRONG = 106, CYANIDES_INORGANIC = 107, THIOCARBAMATE_ESTERS_AND_SALTS_DITHIOCARBAMATE_ESTERS_AND_SALTS = 108,
    ESTERS_SULFATE_ESTERS_PHOSPHATE_ESTERS_THIOPHOSPHATE_ESTERS_AND_BORATE_ESTERS = 109,
    ETHERS = 110, FLUORIDES_INORGANIC = 111, HYDROCARBONS_AROMATIC = 112,
    HALOGENATED_ORGANIC_COMPOUNDS = 113, ISOCYANATES_AND_ISOTHIOCYANATES = 114,
    KETONES = 115, SULFIDES_ORGANIC = 116, METALS_ALKALI_VERY_ACTIVE = 117,
    METALS_ELEMENTAL_AND_POWDER_ACTIVE = 118, METALS_LESS_REACTIVE = 119,
    METALS_AND_METAL_COMPOUNDS_TOXIC = 120, DIAZONIUM_SALTS = 121, NITRILES = 122,
    NITRO_NITROSO_NITRATE_AND_NITRITE_COMPOUNDS_ORGANIC = 123, HYDROCARBONS_ALIPHATIC_UNSATURATED = 124,
    HYDROCARBONS_ALIPHATIC_SATURATED = 125, PEROXIDES_ORGANIC = 126, PHENOLS_AND_CRESOLS = 127,
    SULFONATES_PHOSPHONATES_AND_THIOPHOSPHONATES_ORGANIC = 128, SULFIDES_INORGANIC = 129,
    EPOXIDES = 130, METAL_HYDRIDES_METAL_ALKYLS_METAL_ARYLS_AND_SILANES = 131,
    ANHYDRIDES = 132, SALTS_ACIDIC = 133, SALTS_BASIC = 134, ACYL_HALIDES_SULFONYL_HALIDES_AND_CHLOROFORMATES = 135,
    ORGANOMETALLICS = 136, OXIDIZING_AGENTS_STRONG = 137, REDUCING_AGENTS_STRONG = 138,
    NON_REDOX_ACTIVE_INORGANIC_COMPOUNDS = 139, FLUORINATED_ORGANIC_COMPOUNDS = 140,
    FLUORIDE_SALTS_SOLUBLE = 141, OXIDIZING_AGENTS_WEAK = 142, REDUCING_AGENTS_WEAK = 143,
    NITRIDES_PHOSPHIDES_CARBIDES_AND_SILICIDES = 144, CHLOROSILANES = 145,
    SILOXANES = 146, HALOGENATING_AGENTS = 147, ACIDS_WEAK = 148, BASES_WEAK = 149,
    CARBONATE_SALTS = 150, ALKYNES_WITH_ACETYLENIC_HYDROGEN = 151, ALKYNES_WITH_NO_ACETYLENIC_HYDROGEN = 152,
    CONJUGATED_DIENES = 153, ARYL_HALIDES = 154, AMINES_AROMATIC = 155,
    NITRATE_AND_NITRITE_COMPOUNDS_INORGANIC = 156, ACETALS_KETALS_HEMIACETALS_AND_HEMIKETALS = 157,
    ACRYLATES_AND_ACRYLIC_ACIDS = 158, PHENOLIC_SALTS = 159, QUATERNARY_AMMONIUM_AND_PHOSPHONIUM_SALTS = 160,
    SULFITE_AND_THIOSULFATE_SALTS = 161, OXIMES = 162, POLYMERIZABLE_COMPOUNDS = 163,
    NOT_CHEMICALLY_REACTIVE = 164, INSUFFICIENT_INFORMATION_FOR_CLASSIFICATION = 165,
    WATER_AND_AQUEOUS_SOLUTIONS = 166, NULL = 167, UNKNOWN = 168, WS = 169,
    COMMENT = 170, LINE_COMMENT = 171
  };

  BSLexer(antlr4::CharStream *input);
  ~BSLexer();

  virtual std::string getGrammarFileName() const override;
  virtual const std::vector<std::string>& getRuleNames() const override;

  virtual const std::vector<std::string>& getChannelNames() const override;
  virtual const std::vector<std::string>& getModeNames() const override;
  virtual const std::vector<std::string>& getTokenNames() const override; // deprecated, use vocabulary instead
  virtual antlr4::dfa::Vocabulary& getVocabulary() const override;

  virtual const std::vector<uint16_t> getSerializedATN() const override;
  virtual const antlr4::atn::ATN& getATN() const override;

private:
  static std::vector<antlr4::dfa::DFA> _decisionToDFA;
  static antlr4::atn::PredictionContextCache _sharedContextCache;
  static std::vector<std::string> _ruleNames;
  static std::vector<std::string> _tokenNames;
  static std::vector<std::string> _channelNames;
  static std::vector<std::string> _modeNames;

  static std::vector<std::string> _literalNames;
  static std::vector<std::string> _symbolicNames;
  static antlr4::dfa::Vocabulary _vocabulary;
  static antlr4::atn::ATN _atn;
  static std::vector<uint16_t> _serializedATN;


  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

  struct Initializer {
    Initializer();
  };
  static Initializer _init;
};

